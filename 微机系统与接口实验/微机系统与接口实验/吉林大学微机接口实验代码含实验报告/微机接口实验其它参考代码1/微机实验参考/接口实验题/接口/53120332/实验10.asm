DATA SEGMENT
	P_8255_A		EQU	0600H
	P_8255_B		EQU	0602H
	P_8255_C		EQU	0604H
	P_8255_CON		EQU	0606H
	P_8254_0		EQU	0640H
	P_8254_1		EQU	0642H
	P_8254_2		EQU	0644H
	P_8254_CON		EQU	0646H	

	LED_TABLE	DB  03FH,006H,05BH,04FH,066H,06DH,07DH,007H,07FH,06FH    ;0~9
				DB 	077H,07CH,039H,05EH,079H,071H         ;a~f
				DB 	00H;, 80H                              ;16黑 、 17点

	KEY_TABLE   DB	11101110B, 11011110B, 10111110B, 01111110B
				DB	11101101B, 11011101B, 10111101B, 01111101B
				DB	11101011B, 11011011B, 10111011B, 01111011B
				DB	11100111B, 11010111B, 10110111B, 01110111B

	SHOW_POS	DB 11111110B  ;第一列起始

	BUFFER		DB 10H,10H,10H,10H,10H,10H

	TOTAL_COUNT	DW	?

	STATE			DB		00H   
	INIT_STATE		EQU     00H       ;初始
	RUNNING_STATE   EQU		01H       ;运行
	PAUSE_STATE		EQU		02H       ;暂停
	BLINK_STATE		EQU		03H       ;结束
	EXIT_STATE		EQU		04H       ;退出
	A_STATE         EQU     05H    
DATA ENDS

CODE SEGMENT
START: 
	ASSUME CS:CODE,DS:DATA

	CLI
	MOV AX,0                  ;置中断向量
	MOV ES,AX
	MOV DI,38H
	MOV AX,OFFSET MIR6
	CLD
	STOSW
	MOV AX,SEG MIR6
	STOSW 
	STI		
	;初始化8259
	CLI
	MOV AL,11H  		;ICW1 
	OUT 20H,AL       
	MOV AL,08H  		;ICW2
	OUT 21H,AL    
	MOV AL,00H  		;ICW3
	OUT 21H,AL        
	MOV AL,07H	        ;ICW4
	OUT 21H,AL        
	MOV AL,0EFH      	;OCW1
	OUT 21H,AL
	STI						;开中断
		
	MOV AX,DATA
	MOV DS,AX	
	LEA SI,LED_TABLE 
     
	;初始化8254
	MOV AL,00110110B;36H						
	MOV DX,P_8254_CON    ;计数器0，方式3-方波，二进制计数,初值03E8(1000),clk0 = 1mhz
	OUT DX,AL
	MOV AX,1000            ;计数值1000
	MOV DX,P_8254_0
	OUT DX,AL
	MOV AL,AH
	OUT DX,AL

	MOV AL,01110110B;76H					
	MOV DX,P_8254_CON;计数器1，方式3-方波，二进制计数03E8(1000)
	OUT DX,AL
	MOV AX,1000
	MOV DX,P_8254_1
	OUT DX,AL
	MOV AL,AH
	OUT DX,AL

	;初始化8255
	MOV DX,P_8255_CON
	MOV AL,10001001B;89H
	OUT DX,AL 
  
MAIN_LOOP:
	PUSH AX
	PUSH DX
	MOV AL,0
	MOV DX,P_8255_B
	OUT DX,AL
	POP DX
	POP AX
	MOV CH,STATE
	CMP CH,BLINK_STATE
	JNE NOT_FINISH
	CALL BLINK_3_TEMES	   ;闪烁三次并回到初始状态
	MOV STATE,INIT_STATE	;进入初始状态
	CALL INIT_BUFFER      ;初始全黑

NOT_FINISH:	
	MOV BX,0  ;清零bx
	CALL SHOW     ;显示
A1:	MOV DX, P_8255_A       ;键盘处理,读取的按键内容存在ah
	MOV AL, 00H
	OUT DX,AL

	MOV DX, P_8255_C
	IN AL,DX
	AND AL,0FH
	CMP AL,0FH
	JE MAIN_LOOP    
	
	CALL DELAY_20MS	;延时消抖	
	
	MOV DX,P_8255_A
	MOV AL,00H
	OUT DX,AL
	
	MOV DX,P_8255_C
	IN AL,DX
	AND AL,0FH
	CMP AL,0FH
	JE MAIN_LOOP  
	MOV AH, 11111110B  ;列扫描  从最左边开始
	MOV CX, 4   
FIND_KEY_POS:	
	MOV DX, P_8255_A
	MOV AL,AH
	OUT DX,AL
	MOV DX, P_8255_C
	IN AL,DX
	AND AL,0FH
	CMP AL,0FH
	JNE FOUND_KEY_POS
	ROL AH,1
	LOOP FIND_KEY_POS
	
	MOV AH,80H    ;四列扫描完,发现没有键按下
	JMP KEY_ERROR
	
FOUND_KEY_POS:	
	SHL AH, 1
	SHL AH, 1
	SHL AH, 1
	SHL AH, 1    ;AH算数左移4位则其高位为列号
	
	OR AL,AH    ;AL为键盘码
	LEA BX,KEY_TABLE
	MOV CL,0
FIND_KEY:	
	CMP AL,[BX]
	JZ FOUND_KEY
	INC CL
	INC BX
	CMP AL, 10H
	JNZ FIND_KEY
	
	MOV AH,0FFH  ;CL = 10,说明没有找到对应键的位置码
	JMP KEY_ERROR
	
FOUND_KEY:	
	MOV AH,CL	;AH里保存相对键盘表起始地址的偏移
	PUSH AX
	PUSH DX
KEY_PUSHING:   	
	CALL SHOW	

	MOV AL,0           

	MOV DX,P_8255_A
	OUT DX,AL
	MOV DX,P_8255_C
	IN AL,DX
	AND AL,0FH
	CMP AL,0FH
	JNE KEY_PUSHING
		
	POP DX
	POP AX
		
KEY_ERROR:
	CMP AH,80H
	JE B1
	CMP AH,0FFH
	JE B1
	JMP B2
	
B1:	JMP MAIN_LOOP

B2:
	MOV CH,STATE
	CMP AH,0AH
	JAE GT_9   ;大于等于10转移
	
	CMP CH,INIT_STATE
	JNE RETURN0
	
	LEA DI,BUFFER
	MOV CL,[DI+3]
	MOV [DI+2],CL
	MOV [DI+3],AH
		
RETURN0:
	JMP MAIN_LOOP
	
GT_9:
	CMP AH,0AH
	JNE NOT_A
	
	CMP CH,A_STATE
    JZ LL1
    JMP LL2
LL1:
	MOV STATE,INIT_STATE
	
LL2:	CMP CH,INIT_STATE
	JNE BACK_TO_INIT_STATE
	
	MOV	STATE,RUNNING_STATE  
	LEA DI,BUFFER         ;将第二第三个放到第一第二个，即分钟数从三四放到一二
	MOV CL, [DI+2]
	MOV [DI],CL
	MOV CL, [DI+3]
	MOV [DI+1],CL         
	MOV AL,[DI]
	MOV BYTE PTR [DI+2], 10H
	MOV BYTE PTR [DI+3], 10H
	MOV BYTE PTR [DI+4], 10H
	MOV BYTE PTR [DI+5], 10H
	
	MOV BL,0AH                          
	MUL BL 		;AX=AL*10
	ADD AL,CL
	SUB AH,AH
	MOV BL,3CH
	MUL BL			;AX=AL*60    得到秒数
	MOV TOTAL_COUNT,AX
	CALL OPEN_TR6	;   开中断	
	JMP MAIN_LOOP
	
BACK_TO_INIT_STATE:	
	CALL CLOSE_TR6
	MOV STATE,INIT_STATE	
	CALL INIT_BUFFER
	JMP MAIN_LOOP
	
NOT_A:
	CMP AH,0BH
	JNE NOT_B
	
	CMP CH,RUNNING_STATE
	JNE NO_RUN
	CALL CLOSE_TR6
	MOV STATE,PAUSE_STATE
	JMP MAIN_LOOP
NO_RUN:
	CMP CH,PAUSE_STATE
	JNE NO_EFFECT
	CALL OPEN_TR6
	MOV STATE, RUNNING_STATE
NO_EFFECT:
	JMP MAIN_LOOP

NOT_B:
	CMP AH,0CH
	JNZ RETURN
	CALL CLOSE_TR6
	MOV STATE,A_STATE	
	CALL INIT_BUFFER
	JMP MAIN_LOOP
	
;	MOV AL, [SI+10H]
;	MOV DX, P_8255_B
;	OUT DX,AL

;	MOV AL,00H
;	MOV DX, P_8255_A
;	OUT DX,AL
 	
	MOV AX, 4C00H
	INT 21H
		
RETURN:
	JMP MAIN_LOOP
		
SHOW:

	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH DI
	MOV BX,0  ;清零bx 
	MOV AH,SHOW_POS   ;1111 1110b
	MOV CX,4
	LEA DI,BUFFER   ;缓冲区
	
SHOW_LOOP:	
	MOV BL,[DI]
	MOV AL,[SI+BX]
	MOV DX,P_8255_B
	OUT DX,AL

	MOV AL,AH
	MOV DX,P_8255_A
	OUT DX,AL
	
	ROL AH,1H
	INC DI
	CALL DELAY
	
	MOV AL,[SI+10H]   ;消隐
	MOV DX,P_8255_B
	OUT DX,AL
	
	LOOP SHOW_LOOP
	POP DI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
		 	
MIR6:  			;;8254一秒一个中断;上升沿脉冲
	STI         ;开中断
	
	DEC TOTAL_COUNT
	JNZ TIMER_NOT_FINISH
	
	MOV STATE,BLINK_STATE
	IRET
TIMER_NOT_FINISH:
	PUSH AX
	MOV AX,TOTAL_COUNT
			
	LEA DI,BUFFER
	MOV BL,3CH   ;60
	DIV BL		;秒数/60,AL=商,AH=余数
	PUSH AX
	
	SUB AH,AH     
	MOV BL,0AH
	DIV BL        ;商再除以10   AL=分钟数的十位  ah=分钟数的个位
	
	MOV [DI],AL
	MOV [DI+1],AH
	
	POP AX
	MOV AL,AH
	SUB AH,AH
	
	MOV BL,0AH
	DIV BL        ;余数再除以10    al=秒数的十位    ah=秒数的个位
	MOV [DI+2],AL
	MOV [DI+3],AH
	POP AX
	
	IRET
		
DELAY_20MS:	
	PUSH CX
	PUSH BX
	MOV BX,02H	
D_20_1:	
	MOV CX, 04CA0H	
D_20_0:    
	LOOP D_20_0
	DEC BX
	JNZ D_20_1
	POP BX
	POP CX
	RET

BLINK_3_TEMES:	 
	CALL CLOSE_TR6
	MOV CX,3
D1:	
	MOV AL,[SI]
	MOV DX,P_8255_B
	OUT DX,AL

	MOV AL,00H
	MOV DX,P_8255_A
	OUT DX,AL
	
	CALL DELAY_LONGER
	
	MOV AL,0FFH
	MOV DX,P_8255_A
	OUT DX,AL
	
	CALL DELAY_LONGER
	LOOP D1
	
	RET
	
CLOSE_TR6:
	MOV AL,0EFH     				;ocw1,11101111关闭ir6
	OUT 21H,AL
	RET
	
OPEN_TR6:
	MOV AL,0AFH     ;ocw1,10101111  开ir6
	OUT 21H,AL
	RET	
	
INIT_BUFFER:
	LEA DI,BUFFER           ;初始全黑
	MOV BYTE PTR [DI],10H
	MOV BYTE PTR [DI+1],10H
	MOV BYTE PTR [DI+2],10H
	MOV BYTE PTR [DI+3],10H
	MOV BYTE PTR [DI+4],10H
	MOV BYTE PTR [DI+5],10H
	RET
		
DELAY:  
	PUSH CX
	MOV CX,0FFH	
AA0:    
	LOOP AA0
	POP CX
	RET
	
DELAY_LONGER:  
	PUSH CX
	MOV CX,0FFFFH	
AA1:    
	LOOP AA1
	POP CX
	RET	
	
CODE ENDS
	END START	

				